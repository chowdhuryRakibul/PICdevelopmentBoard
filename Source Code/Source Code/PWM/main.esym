C L "MAIN" 0 11 1 "FUNCTION"
D G "__PCH__" 0 26 ""5.070""
D G "__DEVICE__" 0 26 "4450"
D G "__DATE__" 0 26 ""06-Aug-17""
D G "__TIME__" 0 26 ""20:39:31""
D G "_UNICODE" 0 26 ""?""
D G "__EVAL" 0 26 ""?"" "Standard Header file for the PIC18F4450 device ////////////////"
c L "set_tris_a" 2 5 21 "FUNCTION"
f N "set_tris_a" 2 36 ""
v L "value" 2 36 "int8" `55 
f B "set_tris_a" 2 36 "void(int8 value)" `54 
f N "set_tris_b" 2 37 ""
v L "value" 2 37 "int8" `57 
f B "set_tris_b" 2 37 "void(int8 value)" `56 
f N "set_tris_c" 2 38 ""
v L "value" 2 38 "int8" `59 
f B "set_tris_c" 2 38 "void(int8 value)" `58 
f N "set_tris_d" 2 39 ""
v L "value" 2 39 "int8" `61 
f B "set_tris_d" 2 39 "void(int8 value)" `60 
f N "set_tris_e" 2 40 ""
v L "value" 2 40 "int8" `63 
f B "set_tris_e" 2 40 "void(int8 value)" `62 
f N "get_tris_a" 2 41 ""
f B "get_tris_a" 2 41 "int8()" `64 
f N "get_tris_b" 2 42 ""
f B "get_tris_b" 2 42 "int8()" `65 
f N "get_tris_c" 2 43 ""
f B "get_tris_c" 2 43 "int8()" `66 
f N "get_tris_d" 2 44 ""
f B "get_tris_d" 2 44 "int8()" `67 
f N "get_tris_e" 2 45 ""
f B "get_tris_e" 2 45 "int8()" `68 
f N "output_a" 2 46 ""
v L "value" 2 46 "int8" `70 
f B "output_a" 2 46 "void(int8 value)" `69 
f N "output_b" 2 47 ""
v L "value" 2 47 "int8" `72 
f B "output_b" 2 47 "void(int8 value)" `71 
f N "output_c" 2 48 ""
v L "value" 2 48 "int8" `74 
f B "output_c" 2 48 "void(int8 value)" `73 
f N "output_d" 2 49 ""
v L "value" 2 49 "int8" `76 
f B "output_d" 2 49 "void(int8 value)" `75 
f N "output_e" 2 50 ""
v L "value" 2 50 "int8" `78 
f B "output_e" 2 50 "void(int8 value)" `77 
f N "input_a" 2 51 ""
f B "input_a" 2 51 "int8()" `79 
f N "input_b" 2 52 ""
f B "input_b" 2 52 "int8()" `80 
f N "input_c" 2 53 ""
f B "input_c" 2 53 "int8()" `81 
f N "input_d" 2 54 ""
f B "input_d" 2 54 "int8()" `82 
f N "input_e" 2 55 ""
f B "input_e" 2 55 "int8()" `83 
f N "input_change_a" 2 56 ""
f B "input_change_a" 2 56 "int8()" `84 
f N "input_change_b" 2 57 ""
f B "input_change_b" 2 57 "int8()" `85 
f N "input_change_c" 2 58 ""
f B "input_change_c" 2 58 "int8()" `86 
f N "input_change_d" 2 59 ""
f B "input_change_d" 2 59 "int8()" `87 
f N "input_change_e" 2 60 ""
f B "input_change_e" 2 60 "int8()" `88 
f N "input" 2 61 ""
v L "pin" 2 61 "int16" `90 
f B "input" 2 61 "int8(int16 pin)" `89 
f N "input_state" 2 62 ""
v L "pin" 2 62 "int16" `92 
f B "input_state" 2 62 "int8(int16 pin)" `91 
f N "output_low" 2 63 ""
v L "pin" 2 63 "int16" `94 
f B "output_low" 2 63 "void(int16 pin)" `93 
f N "output_high" 2 64 ""
v L "pin" 2 64 "int16" `96 
f B "output_high" 2 64 "void(int16 pin)" `95 
f N "output_toggle" 2 65 ""
v L "pin" 2 65 "int16" `98 
f B "output_toggle" 2 65 "void(int16 pin)" `97 
f N "output_bit" 2 66 ""
v L "pin" 2 66 "int16" `100 
v L "level" 2 66 "int8" `101 
f B "output_bit" 2 66 "void(int16 pin,int8 level)" `99 
f N "output_float" 2 67 ""
v L "pin" 2 67 "int16" `103 
f B "output_float" 2 67 "void(int16 pin)" `102 
f N "output_drive" 2 68 ""
v L "pin" 2 68 "int16" `105 
f B "output_drive" 2 68 "void(int16 pin)" `104  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 72 "31744"
d G "PIN_A1" 2 73 "31745"
d G "PIN_A2" 2 74 "31746"
d G "PIN_A3" 2 75 "31747"
d G "PIN_A4" 2 76 "31748"
d G "PIN_A5" 2 77 "31749"
d G "PIN_A6" 2 78 "31750"
d G "PIN_B0" 2 80 "31752"
d G "PIN_B1" 2 81 "31753"
d G "PIN_B2" 2 82 "31754"
d G "PIN_B3" 2 83 "31755"
d G "PIN_B4" 2 84 "31756"
d G "PIN_B5" 2 85 "31757"
d G "PIN_B6" 2 86 "31758"
d G "PIN_B7" 2 87 "31759"
d G "PIN_C0" 2 89 "31760"
d G "PIN_C1" 2 90 "31761"
d G "PIN_C2" 2 91 "31762"
d G "PIN_C4" 2 92 "31764"
d G "PIN_C5" 2 93 "31765"
d G "PIN_C6" 2 94 "31766"
d G "PIN_C7" 2 95 "31767"
d G "PIN_D0" 2 97 "31768"
d G "PIN_D1" 2 98 "31769"
d G "PIN_D2" 2 99 "31770"
d G "PIN_D3" 2 100 "31771"
d G "PIN_D4" 2 101 "31772"
d G "PIN_D5" 2 102 "31773"
d G "PIN_D6" 2 103 "31774"
d G "PIN_D7" 2 104 "31775"
d G "PIN_E0" 2 106 "31776"
d G "PIN_E1" 2 107 "31777"
d G "PIN_E2" 2 108 "31778"
d G "PIN_E3" 2 109 "31779"
d G "FALSE" 2 112 "0"
d G "TRUE" 2 113 "1"
d G "BYTE" 2 115 "int8"
d G "BOOLEAN" 2 116 "int1"
d G "getc" 2 118 "getch"
d G "fgetc" 2 119 "getch"
d G "getchar" 2 120 "getch"
d G "putc" 2 121 "putchar"
d G "fputc" 2 122 "putchar"
d G "fgets" 2 123 "gets"
d G "fputs" 2 124 "puts"
c L "output_drive" 2 5 3 "FUNCTION"
f N "restart_cause" 2 129 ""
f B "restart_cause" 2 129 "int8()" `106 
f N "reset_cpu" 2 130 ""
f B "reset_cpu" 2 130 "void()" `107 
f N "sleep" 2 131 ""
f B "sleep" 2 131 "void()" `108  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 133 "7"
d G "MCLR_FROM_SLEEP" 2 134 "11"
d G "MCLR_FROM_RUN" 2 135 "15"
d G "NORMAL_POWER_UP" 2 136 "12"
d G "BROWNOUT_RESTART" 2 137 "14"
d G "WDT_FROM_SLEEP" 2 138 "3"
d G "RESET_INSTRUCTION" 2 139 "0"
d G "SLEEP_FULL" 2 142 "0" "Default"
d G "SLEEP_IDLE" 2 143 "1" "Clock and peripherals don't stop"
c L "sleep" 2 5 5 "FUNCTION"
f N "setup_timer_0" 2 150 ""
v L "mode" 2 150 "int8" `110 
f B "setup_timer_0" 2 150 "void(int8 mode)" `109 
f N "set_timer0" 2 151 ""
v L "value" 2 151 "int16" `112 
f B "set_timer0" 2 151 "void(int16 value)" `111 
f N "get_timer0" 2 152 ""
f B "get_timer0" 2 152 "int16()" `113 
f N "setup_counters" 2 153 ""
v L "mode" 2 153 "int8" `115 
v L "prescaler" 2 153 "int8" `116 
f B "setup_counters" 2 153 "void(int8 mode,int8 prescaler)" `114 
f N "set_rtcc" 2 154 ""
v L "value" 2 154 "int16" `118 
f B "set_rtcc" 2 154 "void(int16 value)" `117 
f N "get_rtcc" 2 155 ""
f B "get_rtcc" 2 155 "int16()" `119  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 157 "0"
d G "T0_EXT_L_TO_H" 2 158 "32"
d G "T0_EXT_H_TO_L" 2 159 "48"
d G "T0_DIV_1" 2 161 "8"
d G "T0_DIV_2" 2 162 "0"
d G "T0_DIV_4" 2 163 "1"
d G "T0_DIV_8" 2 164 "2"
d G "T0_DIV_16" 2 165 "3"
d G "T0_DIV_32" 2 166 "4"
d G "T0_DIV_64" 2 167 "5"
d G "T0_DIV_128" 2 168 "6"
d G "T0_DIV_256" 2 169 "7"
d G "T0_OFF" 2 171 "0x80"
d G "T0_8_BIT" 2 173 "0x40"
d G "RTCC_INTERNAL" 2 175 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 176 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 177 "48"
d G "RTCC_DIV_1" 2 178 "8"
d G "RTCC_DIV_2" 2 179 "0"
d G "RTCC_DIV_4" 2 180 "1"
d G "RTCC_DIV_8" 2 181 "2"
d G "RTCC_DIV_16" 2 182 "3"
d G "RTCC_DIV_32" 2 183 "4"
d G "RTCC_DIV_64" 2 184 "5"
d G "RTCC_DIV_128" 2 185 "6"
d G "RTCC_DIV_256" 2 186 "7"
d G "RTCC_OFF" 2 187 "0x80"
d G "RTCC_8_BIT" 2 188 "0x40"
c L "get_rtcc" 2 5 8 "FUNCTION"
f N "setup_wdt" 2 199 ""
v L "mode" 2 199 "int16" `121 
f B "setup_wdt" 2 199 "void(int16 mode)" `120 
f N "restart_wdt" 2 200 ""
f B "restart_wdt" 2 200 "void()" `122  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 202 "0x100"
d G "WDT_OFF" 2 203 "0"
d G "WDT_4MS" 2 205 "0x300"
d G "WDT_8MS" 2 206 "0x500"
d G "WDT_16MS" 2 207 "0x700"
d G "WDT_32MS" 2 208 "0x900"
d G "WDT_64MS" 2 209 "0xB00"
d G "WDT_128MS" 2 210 "0xD00"
d G "WDT_256MS" 2 211 "0xF00"
d G "WDT_512MS" 2 212 "0x1100"
d G "WDT_1S" 2 213 "0x1300"
d G "WDT_2S" 2 214 "0x1500"
d G "WDT_4S" 2 215 "0x1700"
d G "WDT_8S" 2 216 "0x1900"
d G "WDT_16" 2 217 "0x1B00"
d G "WDT_32S" 2 218 "0x1D00"
d G "WDT_64S" 2 219 "0x1F00"
d G "WDT_128S" 2 220 "0x2100"
c L "restart_wdt" 2 5 3 "FUNCTION"
f N "setup_timer_1" 2 226 ""
v L "mode" 2 226 "int16" `124 
f B "setup_timer_1" 2 226 "void(int16 mode)" `123 
f N "get_timer1" 2 227 ""
f B "get_timer1" 2 227 "int16()" `125 
f N "set_timer1" 2 228 ""
v L "value" 2 228 "int16" `127 
f B "set_timer1" 2 228 "void(int16 value)" `126  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 231 "0"
d G "T1_INTERNAL" 2 232 "0x85"
d G "T1_EXTERNAL" 2 233 "0x87"
d G "T1_EXTERNAL_SYNC" 2 234 "0x83"
d G "T1_CLK_OUT" 2 236 "8"
d G "T1_DIV_BY_1" 2 238 "0"
d G "T1_DIV_BY_2" 2 239 "0x10"
d G "T1_DIV_BY_4" 2 240 "0x20"
d G "T1_DIV_BY_8" 2 241 "0x30"
c L "set_timer1" 2 5 3 "FUNCTION"
f N "setup_timer_2" 2 246 ""
v L "mode" 2 246 "int8" `129 
v L "period" 2 246 "int8" `130 
v L "postscale" 2 246 "int8" `131 
f B "setup_timer_2" 2 246 "void(int8 mode,int8 period,int8 postscale)" `128 
f N "get_timer2" 2 247 ""
f B "get_timer2" 2 247 "int8()" `132 
f N "set_timer2" 2 248 ""
v L "value" 2 248 "int8" `134 
f B "set_timer2" 2 248 "void(int8 value)" `133  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 250 "0"
d G "T2_DIV_BY_1" 2 251 "4"
d G "T2_DIV_BY_4" 2 252 "5"
d G "T2_DIV_BY_16" 2 253 "6"
c L "set_timer2" 2 5 4 "FUNCTION"
f N "setup_ccp1" 2 259 ""
v L "mode" 2 259 "int32" `136 
f B "setup_ccp1" 2 259 "void(int32 mode)" `135 
f N "setup_ccp1" 2 260 ""
v L "mode" 2 260 "int32" `138 
v L "pwm" 2 260 "int8" `139 
f B "setup_ccp1" 2 260 "void(int32 mode,int8 pwm)" `137 
f N "set_pwm1_duty" 2 261 ""
v L "value" 2 261 "int16" `141 
f B "set_pwm1_duty" 2 261 "void(int16 value)" `140  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 263 "0"
d G "CCP_CAPTURE_FE" 2 264 "4"
d G "CCP_CAPTURE_RE" 2 265 "5"
d G "CCP_CAPTURE_DIV_4" 2 266 "6"
d G "CCP_CAPTURE_DIV_16" 2 267 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 268 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 269 "9"
d G "CCP_COMPARE_INT" 2 270 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 271 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 2 272 "0xB"
d G "CCP_PWM" 2 273 "0xC"
d G "CCP_PWM_PLUS_1" 2 274 "0x1c"
d G "CCP_PWM_PLUS_2" 2 275 "0x2c"
d G "CCP_PWM_PLUS_3" 2 276 "0x3c"
c L "set_pwm1_duty" 2 5 1 "FUNCTION"
c L "set_pwm1_duty" 2 5 2 "FUNCTION"
f N "setup_uart" 2 283 ""
v L "baud" 2 283 "int32" `146 
f B "setup_uart" 2 283 "void(int32 baud)" `145 
f N "setup_uart" 2 284 ""
v L "baud" 2 284 "int32" `148 
v L "stream" 2 284 "int8" `149 
f B "setup_uart" 2 284 "void(int32 baud,int8 stream)" `147 
f N "setup_uart" 2 285 ""
v L "baud" 2 285 "int32" `151 
v L "stream" 2 285 "int8" `152 
v L "clock" 2 285 "int32" `153 
f B "setup_uart" 2 285 "void(int32 baud,int8 stream,int32 clock)" `150 
f N "set_uart_speed" 2 286 ""
v L "baud" 2 286 "int32" `155 
f B "set_uart_speed" 2 286 "void(int32 baud)" `154 
f N "set_uart_speed" 2 287 ""
v L "baud" 2 287 "int32" `157 
v L "stream" 2 287 "int8" `158 
f B "set_uart_speed" 2 287 "void(int32 baud,int8 stream)" `156 
f N "set_uart_speed" 2 288 ""
v L "baud" 2 288 "int32" `160 
v L "stream" 2 288 "int8" `161 
v L "clock" 2 288 "int32" `162 
f B "set_uart_speed" 2 288 "void(int32 baud,int8 stream,int32 clock)" `159  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 292 "2"
d G "UART_DATA" 2 293 "4"
d G "UART_AUTODETECT" 2 294 "8"
d G "UART_AUTODETECT_NOWAIT" 2 295 "9"
d G "UART_WAKEUP_ON_RDA" 2 296 "10"
d G "UART_SEND_BREAK" 2 297 "13"
c L "set_uart_speed" 2 5 2 "FUNCTION"
f N "setup_low_volt_detect" 2 300 ""
v L "mode" 2 300 "int8" `164 
f B "setup_low_volt_detect" 2 300 "void(int8 mode)" `163  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 302 "0x1F"
d G "LVD_45" 2 303 "0x1E"
d G "LVD_42" 2 304 "0x1D"
d G "LVD_40" 2 305 "0x1C"
d G "LVD_38" 2 306 "0x1B"
d G "LVD_36" 2 307 "0x1A"
d G "LVD_35" 2 308 "0x19"
d G "LVD_33" 2 309 "0x18"
d G "LVD_30" 2 310 "0x17"
d G "LVD_28" 2 311 "0x16"
d G "LVD_27" 2 312 "0x15"
d G "LVD_25" 2 313 "0x14"
d G "LVD_24" 2 314 "0x13"
d G "LVD_23" 2 315 "0x12"
d G "LVD_22" 2 316 "0x11"
d G "LVD_21" 2 317 "0x10"
d G "LVD_TRIGGER_BELOW" 2 319 "0"
d G "LVD_TRIGGER_ABOVE" 2 320 "0x80"
c L "setup_low_volt_detect" 2 5 2 "FUNCTION"
f N "setup_oscillator" 2 325 ""
v L "mode" 2 325 "int8" `166 
f B "setup_oscillator" 2 325 "int8(int8 mode)" `165  "Constants used in setup_oscillator() are:"
d G "OSC_INTRC" 2 327 "3"
d G "OSC_NORMAL" 2 328 "2"
d G "OSC_TIMER1" 2 329 "1"
d G "OSC_IDLE_ON_SLEEP" 2 330 "0x80"
d G "OSC_STATE_EXT_RUNNING" 2 332 "8"
c L "setup_oscillator" 2 5 4 "FUNCTION"
f N "setup_adc" 2 340 ""
v L "mode" 2 340 "int16" `168 
f B "setup_adc" 2 340 "void(int16 mode)" `167 
f N "read_adc" 2 341 ""
f B "read_adc" 2 341 "int8()" `169 
f N "read_adc" 2 342 ""
v L "mode" 2 342 "int8" `171 
f B "read_adc" 2 342 "int8(int8 mode)" `170 
f N "read_adc" 2 343 ""
f G "read_adc" 2 343 "int16()" `172 
f N "read_adc" 2 344 ""
v L "mode" 2 344 "int8" `173 
f G "read_adc" 2 344 "int16(int8 mode,int8 pins)" `172 
f N "adc_done" 2 345 ""
f B "adc_done" 2 345 "int8(int8 mode,int8 pins)" `172  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 347 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 348 "0x100"
d G "ADC_CLOCK_DIV_4" 2 349 "0x04"
d G "ADC_CLOCK_DIV_8" 2 350 "0x01"
d G "ADC_CLOCK_DIV_16" 2 351 "0x05"
d G "ADC_CLOCK_DIV_32" 2 352 "0x02"
d G "ADC_CLOCK_DIV_64" 2 353 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 354 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 356 "0x00"
d G "ADC_TAD_MUL_2" 2 357 "0x08"
d G "ADC_TAD_MUL_4" 2 358 "0x10"
d G "ADC_TAD_MUL_6" 2 359 "0x18"
d G "ADC_TAD_MUL_8" 2 360 "0x20"
d G "ADC_TAD_MUL_12" 2 361 "0x28"
d G "ADC_TAD_MUL_16" 2 362 "0x30"
d G "ADC_TAD_MUL_20" 2 363 "0x38"
c L "adc_done" 2 5 1 "FUNCTION"
f N "setup_adc_ports" 2 366 ""
v L "pins" 2 366 "int8" `174 
f B "setup_adc_ports" 2 366 "void(int8 pins)" `173 
f N "setup_adc_ports" 2 367 ""
v L "pins" 2 367 "int8" `176 
v L "reference" 2 367 "int8" `177 
f B "setup_adc_ports" 2 367 "void(int8 pins,int8 reference)" `175 
f N "set_adc_channel" 2 368 ""
v L "channel" 2 368 "int8" `179 
f B "set_adc_channel" 2 368 "void(int8 channel)" `178  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 371 "0x0F" "None"
d G "ALL_ANALOG" 2 372 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 2 373 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 2 374 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 2 375 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 2 376 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 2 377 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 378 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 379 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 380 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 381 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 382 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 383 "0x0D" "A0 A1"
d G "AN0" 2 384 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 2 385 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 386 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 387 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 388 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 2 389 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 2 390 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 2 391 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 392 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 393 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 394 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 395 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 396 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 399 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 400 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 401 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 402 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 405 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 406 "1"
d G "ADC_READ_ONLY" 2 407 "6"
c L "set_adc_channel" 2 5 3 "FUNCTION"
f N "abs" 2 413 ""
v L "x" 2 413 "sint8" `181 
f B "abs" 2 413 "sint8(sint8 x)" `180 
f N "abs" 2 414 ""
v L "x" 2 414 "sint16" `183 
f B "abs" 2 414 "sint16(sint16 x)" `182 
f N "abs" 2 415 ""
v L "x" 2 415 "sint32" `185 
f B "abs" 2 415 "sint32(sint32 x)" `184 
f N "abs" 2 416 ""
v L "x" 2 416 "float" `187 
f B "abs" 2 416 "float(float x)" `186 
f N "_mul" 2 417 ""
v L "??65535" 2 417 "int8" `189 
v L "??65535" 2 417 "int8" `190 
f B "_mul" 2 417 "int16(int8 ,int8 )" `188 
f N "_mul" 2 418 ""
v L "??65535" 2 418 "sint8" `192 
v L "??65535" 2 418 "sint8" `193 
f B "_mul" 2 418 "sint16(sint8 ,sint8 )" `191 
f N "_mul" 2 419 ""
v L "??65535" 2 419 "int16" `195 
v L "??65535" 2 419 "int16" `196 
f B "_mul" 2 419 "int32(int16 ,int16 )" `194 
f N "_mul" 2 420 ""
v L "??65535" 2 420 "sint16" `198 
v L "??65535" 2 420 "sint16" `199 
f B "_mul" 2 420 "sint32(sint16 ,sint16 )" `197  "Memory Manipulation Prototypes:"
f N "read_bank" 2 423 ""
v L "bank" 2 423 "int8" `201 
v L "offset" 2 423 "int8" `202 
f B "read_bank" 2 423 "int8(int8 bank,int8 offset)" `200 
f N "write_bank" 2 424 ""
v L "bank" 2 424 "int8" `204 
v L "offset" 2 424 "int8" `205 
v L "value" 2 424 "int8" `206 
f B "write_bank" 2 424 "void(int8 bank,int8 offset,int8 value)" `203 
f N "strcpy" 2 425 ""
v L "dest" 2 425 "*int8" `208 
v L "src" 2 425 "*int8" `209 
f B "strcpy" 2 425 "void(*int8 dest,*int8 src)" `207 
f N "strcopy" 2 426 ""
v L "dest" 2 426 "*int8" `211 
v L "src" 2 426 "*int8" `212 
f B "strcopy" 2 426 "void(*int8 dest,*int8 src)" `210 
f N "memset" 2 427 ""
v L "destination" 2 427 "*int8" `214 
v L "value" 2 427 "int8" `215 
v L "num" 2 427 "int16" `216 
f B "memset" 2 427 "void(*int8 destination,int8 value,int16 num)" `213 
f N "memcpy" 2 428 ""
v L "destination" 2 428 "*int8" `218 
v L "source" 2 428 "*int8" `219 
v L "num" 2 428 "int16" `220 
f B "memcpy" 2 428 "void(*int8 destination,*int8 source,int16 num)" `217  "String Prototypes:"
f N "toupper" 2 431 ""
v L "cvalue" 2 431 "int8" `222 
f B "toupper" 2 431 "int8(int8 cvalue)" `221 
f N "tolower" 2 432 ""
v L "cvalue" 2 432 "int8" `224 
f B "tolower" 2 432 "int8(int8 cvalue)" `223 
f N "sprintf" 2 433 ""
v L "string" 2 433 "*int8" `226 
v L "cstring" 2 433 "*int8" `227 
f B "sprintf" 2 433 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `225  "Data Manipulators Prototypes:"
f N "shift_left" 2 436 ""
v L "address" 2 436 "*int8" `230 
v L "bytes" 2 436 "int8" `231 
v L "value" 2 436 "int8" `232 
f B "shift_left" 2 436 "int8(*int8 address,int8 bytes,int8 value)" `229 
f N "shift_right" 2 437 ""
v L "address" 2 437 "*int8" `234 
v L "bytes" 2 437 "int8" `235 
v L "value" 2 437 "int8" `236 
f B "shift_right" 2 437 "int8(*int8 address,int8 bytes,int8 value)" `233 
f N "rotate_left" 2 438 ""
v L "address" 2 438 "*int8" `238 
v L "bytes" 2 438 "int8" `239 
f B "rotate_left" 2 438 "void(*int8 address,int8 bytes)" `237 
f N "rotate_right" 2 439 ""
v L "address" 2 439 "*int8" `241 
v L "bytes" 2 439 "int8" `242 
f B "rotate_right" 2 439 "void(*int8 address,int8 bytes)" `240 
f N "swap" 2 440 ""
v L "value" 2 440 "int8" `244 
f B "swap" 2 440 "void(int8 value)" `243 
f N "make8" 2 441 ""
v L "var" 2 441 "int16" `246 
v L "offset" 2 441 "int8" `247 
f B "make8" 2 441 "int8(int16 var,int8 offset)" `245 
f N "make8" 2 442 ""
v L "var" 2 442 "int32" `249 
v L "offset" 2 442 "int8" `250 
f B "make8" 2 442 "int8(int32 var,int8 offset)" `248 
f N "make16" 2 443 ""
v L "varhigh" 2 443 "int8" `252 
v L "varlow" 2 443 "int8" `253 
f B "make16" 2 443 "int16(int8 varhigh,int8 varlow)" `251 
f N "make32" 2 444 ""
v L "var1" 2 444 "int16" `255 
f B "make32" 2 444 "int32(int16 var1)" `254 
f N "make32" 2 445 ""
v L "var1" 2 445 "int16" `257 
v L "var2" 2 445 "int16" `258 
f B "make32" 2 445 "int32(int16 var1,int16 var2)" `256 
f N "make32" 2 446 ""
v L "var1" 2 446 "int16" `260 
v L "var2" 2 446 "int8" `261 
f B "make32" 2 446 "int32(int16 var1,int8 var2)" `259 
f N "make32" 2 447 ""
v L "var1" 2 447 "int16" `263 
v L "var2" 2 447 "int8" `264 
v L "var3" 2 447 "int8" `265 
f B "make32" 2 447 "int32(int16 var1,int8 var2,int8 var3)" `262 
f N "make32" 2 448 ""
v L "var1" 2 448 "int8" `267 
f B "make32" 2 448 "int32(int8 var1)" `266 
f N "make32" 2 449 ""
v L "var1" 2 449 "int8" `269 
v L "var2" 2 449 "int8" `270 
f B "make32" 2 449 "int32(int8 var1,int8 var2)" `268 
f N "make32" 2 450 ""
v L "var1" 2 450 "int8" `272 
v L "var2" 2 450 "int8" `273 
v L "var3" 2 450 "int8" `274 
f B "make32" 2 450 "int32(int8 var1,int8 var2,int8 var3)" `271 
f N "make32" 2 451 ""
v L "var1" 2 451 "int8" `276 
v L "var2" 2 451 "int8" `277 
v L "var3" 2 451 "int8" `278 
v L "var4" 2 451 "int8" `279 
f B "make32" 2 451 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `275 
f N "make32" 2 452 ""
v L "var1" 2 452 "int8" `281 
v L "var2" 2 452 "int16" `282 
f B "make32" 2 452 "int32(int8 var1,int16 var2)" `280 
f N "make32" 2 453 ""
v L "var1" 2 453 "int8" `284 
v L "var2" 2 453 "int16" `285 
v L "var3" 2 453 "int8" `286 
f B "make32" 2 453 "int32(int8 var1,int16 var2,int8 var3)" `283 
f N "make32" 2 454 ""
v L "var1" 2 454 "int8" `288 
v L "var2" 2 454 "int8" `289 
v L "var3" 2 454 "int16" `290 
f B "make32" 2 454 "int32(int8 var1,int8 var2,int16 var3)" `287 
f N "bit_set" 2 455 ""
v L "var" 2 455 "int8" `292 
v L "bit" 2 455 "int8" `293 
f B "bit_set" 2 455 "void(int8 var,int8 bit)" `291 
f N "bit_set" 2 456 ""
v L "var" 2 456 "int16" `295 
v L "bit" 2 456 "int8" `296 
f B "bit_set" 2 456 "void(int16 var,int8 bit)" `294 
f N "bit_set" 2 457 ""
v L "var" 2 457 "int32" `298 
v L "bit" 2 457 "int8" `299 
f B "bit_set" 2 457 "void(int32 var,int8 bit)" `297 
f N "bit_clear" 2 458 ""
v L "var" 2 458 "int8" `301 
v L "bit" 2 458 "int8" `302 
f B "bit_clear" 2 458 "void(int8 var,int8 bit)" `300 
f N "bit_clear" 2 459 ""
v L "var" 2 459 "int16" `304 
v L "bit" 2 459 "int8" `305 
f B "bit_clear" 2 459 "void(int16 var,int8 bit)" `303 
f N "bit_clear" 2 460 ""
v L "var" 2 460 "int32" `307 
v L "bit" 2 460 "int8" `308 
f B "bit_clear" 2 460 "void(int32 var,int8 bit)" `306 
f N "bit_test" 2 461 ""
v L "var" 2 461 "int8" `310 
v L "bit" 2 461 "int8" `311 
f B "bit_test" 2 461 "int8(int8 var,int8 bit)" `309 
f N "bit_test" 2 462 ""
v L "var" 2 462 "int16" `313 
v L "bit" 2 462 "int8" `314 
f B "bit_test" 2 462 "int8(int16 var,int8 bit)" `312 
f N "bit_test" 2 463 ""
v L "var" 2 463 "int32" `316 
v L "bit" 2 463 "int8" `317 
f B "bit_test" 2 463 "int8(int32 var,int8 bit)" `315  "#use delay() Prototypes:"
f N "delay_cycles" 2 466 ""
v L "count" 2 466 "int8" `319 
f B "delay_cycles" 2 466 "void(int8 count)" `318 
f N "delay_ms" 2 467 ""
v L "time" 2 467 "int16" `321 
f B "delay_ms" 2 467 "void(int16 time)" `320 
f N "delay_us" 2 468 ""
v L "time" 2 468 "int16" `323 
f B "delay_us" 2 468 "void(int16 time)" `322  "#use rs232() Prototypes:"
f N "putchar" 2 471 ""
v L "cdata" 2 471 "int8" `325 
f B "putchar" 2 471 "void(int8 cdata)" `324 
f N "putchar" 2 472 ""
v L "cdata" 2 472 "int8" `327 
v L "stream" 2 472 "int8" `328 
f B "putchar" 2 472 "void(int8 cdata,int8 stream)" `326 
f N "puts" 2 473 ""
v L "string" 2 473 "*int8" `330 
f B "puts" 2 473 "void(*int8 string)" `329 
f N "puts" 2 474 ""
v L "string" 2 474 "*int8" `332 
v L "stream" 2 474 "int8" `333 
f B "puts" 2 474 "void(*int8 string,int8 stream)" `331 
f N "getch" 2 475 ""
f B "getch" 2 475 "int8()" `334 
f N "getch" 2 476 ""
v L "stream" 2 476 "int8" `336 
f B "getch" 2 476 "int8(int8 stream)" `335 
f N "gets" 2 477 ""
v L "string" 2 477 "*int8" `338 
f B "gets" 2 477 "void(*int8 string)" `337 
f N "gets" 2 478 ""
v L "string" 2 478 "*int8" `340 
v L "stream" 2 478 "int8" `341 
f B "gets" 2 478 "void(*int8 string,int8 stream)" `339 
f N "kbhit" 2 479 ""
f B "kbhit" 2 479 "int8()" `342 
f N "kbhit" 2 480 ""
v L "stream" 2 480 "int8" `344 
f B "kbhit" 2 480 "int8(int8 stream)" `343 
f N "printf" 2 481 ""
v L "string" 2 481 "*int8" `346 
f B "printf" 2 481 "void(*int8 string,*int8 _VA_LIST)" `345 
f N "fprintf" 2 482 ""
v L "stream" 2 482 "int8" `349 
v L "string" 2 482 "*int8" `350 
f B "fprintf" 2 482 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `348 
f N "putc_send" 2 483 ""
f B "putc_send" 2 483 "void()" `352 
f N "fputc_send" 2 484 ""
v L "stream" 2 484 "int8" `354 
f B "fputc_send" 2 484 "void(int8 stream)" `353 
f N "rcv_buffer_full" 2 485 ""
f B "rcv_buffer_full" 2 485 "int8()" `355 
f N "rcv_buffer_full" 2 486 ""
v L "stream" 2 486 "int8" `357 
f B "rcv_buffer_full" 2 486 "int8(int8 stream)" `356 
f N "rcv_buffer_bytes" 2 487 ""
f B "rcv_buffer_bytes" 2 487 "int16()" `358 
f N "rcv_buffer_bytes" 2 488 ""
v L "stream" 2 488 "int8" `360 
f B "rcv_buffer_bytes" 2 488 "int16(int8 stream)" `359 
f N "tx_buffer_full" 2 489 ""
f B "tx_buffer_full" 2 489 "int8()" `361 
f N "tx_buffer_full" 2 490 ""
v L "stream" 2 490 "int8" `363 
f B "tx_buffer_full" 2 490 "int8(int8 stream)" `362 
f N "tx_buffer_bytes" 2 491 ""
f B "tx_buffer_bytes" 2 491 "int16()" `364 
f N "tx_buffer_bytes" 2 492 ""
v L "stream" 2 492 "int8" `366 
f B "tx_buffer_bytes" 2 492 "int16(int8 stream)" `365  "#use i2c() Prototypes:"
f N "i2c_read" 2 495 ""
f B "i2c_read" 2 495 "int8()" `367 
f N "i2c_read" 2 496 ""
v L "stream" 2 496 "int8" `369 
f B "i2c_read" 2 496 "int8(int8 stream)" `368 
f N "i2c_read" 2 497 ""
v L "stream" 2 497 "int8" `371 
v L "ack" 2 497 "int8" `372 
f B "i2c_read" 2 497 "int8(int8 stream,int8 ack)" `370 
f N "i2c_write" 2 498 ""
v L "data" 2 498 "int8" `374 
f B "i2c_write" 2 498 "int8(int8 data)" `373 
f N "i2c_write" 2 499 ""
v L "stream" 2 499 "int8" `376 
v L "data" 2 499 "int8" `377 
f B "i2c_write" 2 499 "int8(int8 stream,int8 data)" `375 
f N "i2c_start" 2 500 ""
f B "i2c_start" 2 500 "void()" `378 
f N "i2c_start" 2 501 ""
v L "stream" 2 501 "int8" `380 
f B "i2c_start" 2 501 "void(int8 stream)" `379 
f N "i2c_start" 2 502 ""
v L "stream" 2 502 "int8" `382 
v L "restart" 2 502 "int8" `383 
f B "i2c_start" 2 502 "void(int8 stream,int8 restart)" `381 
f N "i2c_stop" 2 503 ""
f B "i2c_stop" 2 503 "void()" `384 
f N "i2c_stop" 2 504 ""
v L "stream" 2 504 "int8" `386 
f B "i2c_stop" 2 504 "void(int8 stream)" `385 
f N "i2c_isr_state" 2 505 ""
f B "i2c_isr_state" 2 505 "int8()" `387 
f N "i2c_slaveaddr" 2 506 ""
v L "addr" 2 506 "int8" `389 
f B "i2c_slaveaddr" 2 506 "void(int8 addr)" `388 
f N "i2c_slaveaddr" 2 507 ""
v L "stream" 2 507 "int8" `391 
v L "addr" 2 507 "int8" `392 
f B "i2c_slaveaddr" 2 507 "void(int8 stream,int8 addr)" `390 
f N "i2c_poll" 2 508 ""
f B "i2c_poll" 2 508 "int8()" `393 
f N "i2c_poll" 2 509 ""
v L "stream" 2 509 "int8" `395 
f B "i2c_poll" 2 509 "int8(int8 stream)" `394 
f N "i2c_init" 2 510 ""
v L "baud" 2 510 "int32" `397 
f B "i2c_init" 2 510 "void(int32 baud)" `396 
f N "i2c_init" 2 511 ""
v L "stream" 2 511 "int8" `399 
v L "baud" 2 511 "int32" `400 
f B "i2c_init" 2 511 "void(int8 stream,int32 baud)" `398  "#use spi() Prototypes:"
f N "spi_xfer" 2 514 ""
f B "spi_xfer" 2 514 "int8()" `401 
f N "spi_xfer" 2 515 ""
f G "spi_xfer" 2 515 "int16(int8 data)" `402 
f N "spi_xfer" 2 516 ""
f G "spi_xfer" 2 516 "int32(int8 data)" `402 
f N "spi_xfer" 2 517 ""
v L "data" 2 517 "int8" `403 
f B "spi_xfer" 2 517 "int8(int8 data)" `402 
f N "spi_xfer" 2 518 ""
v L "data" 2 518 "int16" `405 
f B "spi_xfer" 2 518 "int16(int16 data)" `404 
f N "spi_xfer" 2 519 ""
v L "data" 2 519 "int32" `407 
f B "spi_xfer" 2 519 "int32(int32 data)" `406 
f N "spi_xfer" 2 520 ""
v L "stream" 2 520 "int8" `409 
v L "data" 2 520 "int8" `410 
f B "spi_xfer" 2 520 "int8(int8 stream,int8 data)" `408 
f N "spi_xfer" 2 521 ""
v L "stream" 2 521 "int8" `412 
v L "data" 2 521 "int16" `413 
f B "spi_xfer" 2 521 "int16(int8 stream,int16 data)" `411 
f N "spi_xfer" 2 522 ""
v L "stream" 2 522 "int8" `415 
v L "data" 2 522 "int32" `416 
f B "spi_xfer" 2 522 "int32(int8 stream,int32 data)" `414 
f N "spi_xfer" 2 523 ""
v L "stream" 2 523 "int8" `418 
v L "data" 2 523 "int8" `419 
v L "bits" 2 523 "int8" `420 
f B "spi_xfer" 2 523 "int8(int8 stream,int8 data,int8 bits)" `417 
f N "spi_xfer" 2 524 ""
v L "stream" 2 524 "int8" `422 
v L "data" 2 524 "int16" `423 
v L "bits" 2 524 "int8" `424 
f B "spi_xfer" 2 524 "int16(int8 stream,int16 data,int8 bits)" `421 
f N "spi_xfer" 2 525 ""
v L "stream" 2 525 "int8" `426 
v L "data" 2 525 "int32" `427 
v L "bits" 2 525 "int8" `428 
f B "spi_xfer" 2 525 "int32(int8 stream,int32 data,int8 bits)" `425 
f N "spi_init" 2 526 ""
v L "baud" 2 526 "int32" `430 
f B "spi_init" 2 526 "void(int32 baud)" `429 
f N "spi_init" 2 527 ""
v L "stream" 2 527 "int8" `432 
v L "baud" 2 527 "int32" `433 
f B "spi_init" 2 527 "void(int8 stream,int32 baud)" `431 
f N "spi_speed" 2 528 ""
v L "baud" 2 528 "int32" `435 
f B "spi_speed" 2 528 "void(int32 baud)" `434 
f N "spi_speed" 2 529 ""
v L "stream" 2 529 "int8" `437 
v L "baud" 2 529 "int32" `438 
f B "spi_speed" 2 529 "void(int8 stream,int32 baud)" `436 
f N "spi_speed" 2 530 ""
v L "stream" 2 530 "int8" `440 
v L "baud" 2 530 "int32" `441 
v L "clock" 2 530 "int32" `442 
f B "spi_speed" 2 530 "void(int8 stream,int32 baud,int32 clock)" `439 
f N "spi_prewrite" 2 531 ""
v L "data" 2 531 "int8" `444 
f B "spi_prewrite" 2 531 "void(int8 data)" `443 
f N "spi_prewrite" 2 532 ""
v L "data" 2 532 "int16" `446 
f B "spi_prewrite" 2 532 "void(int16 data)" `445 
f N "spi_prewrite" 2 533 ""
v L "data" 2 533 "int32" `448 
f B "spi_prewrite" 2 533 "void(int32 data)" `447 
f N "spi_prewrite" 2 534 ""
v L "??65535" 2 534 "int8" `450 
v L "data" 2 534 "int8" `451 
f B "spi_prewrite" 2 534 "void(int8 ,int8 data)" `449 
f N "spi_prewrite" 2 535 ""
v L "??65535" 2 535 "int8" `453 
v L "data" 2 535 "int16" `454 
f B "spi_prewrite" 2 535 "void(int8 ,int16 data)" `452 
f N "spi_prewrite" 2 536 ""
v L "??65535" 2 536 "int8" `456 
v L "data" 2 536 "int32" `457 
f B "spi_prewrite" 2 536 "void(int8 ,int32 data)" `455 
f N "spi_xfer_in" 2 537 ""
f B "spi_xfer_in" 2 537 "int8()" `458 
f N "spi_xfer_in" 2 538 ""
f G "spi_xfer_in" 2 538 "int16(int8 bits)" `459 
f N "spi_xfer_in" 2 539 ""
f G "spi_xfer_in" 2 539 "int32(int8 bits)" `459 
f N "spi_xfer_in" 2 540 ""
v L "bits" 2 540 "int8" `460 
f B "spi_xfer_in" 2 540 "int8(int8 bits)" `459 
f N "spi_xfer_in" 2 541 ""
v L "bits" 2 541 "int8" `462 
f G "spi_xfer_in" 2 541 "int16(int8 bits,int8 bits)" `461 
f N "spi_xfer_in" 2 542 ""
v L "bits" 2 542 "int8" `462 
f G "spi_xfer_in" 2 542 "int32(int8 bits,int8 bits)" `461 
f N "spi_xfer_in" 2 543 ""
v L "stream" 2 543 "int8" `462 
v L "bits" 2 543 "int8" `463 
f B "spi_xfer_in" 2 543 "int8(int8 stream,int8 bits)" `461 
f N "spi_xfer_in" 2 544 ""
v L "stream" 2 544 "int8" `462 
v L "bits" 2 544 "int8" `466 
f G "spi_xfer_in" 2 544 "int16(int8 stream,int8 bits,int8 task)" `464 
f N "spi_xfer_in" 2 545 ""
v L "stream" 2 545 "int8" `462 
v L "bits" 2 545 "int8" `466 
f G "spi_xfer_in" 2 545 "int32(int8 stream,int8 bits,int8 task)" `464  "#use rtos() Prototypes:"
f N "rtos_run" 2 548 ""
f B "rtos_run" 2 548 "void(int8 stream,int8 bits,int8 task)" `464 
f N "rtos_yield" 2 549 ""
f B "rtos_yield" 2 549 "void(int8 bits,int8 task)" `465 
f N "rtos_enable" 2 550 ""
v L "task" 2 550 "int8" `467 
f B "rtos_enable" 2 550 "void(int8 task)" `466 
f N "rtos_disable" 2 551 ""
v L "task" 2 551 "int8" `469 
f B "rtos_disable" 2 551 "void(int8 task)" `468 
f N "rtos_terminate" 2 552 ""
f B "rtos_terminate" 2 552 "void()" `470 
f N "rtos_await" 2 553 ""
v L "flag" 2 553 "int8" `472 
f B "rtos_await" 2 553 "void(int8 flag)" `471 
f N "rtos_wait" 2 554 ""
v L "sem" 2 554 "int8" `474 
f B "rtos_wait" 2 554 "void(int8 sem)" `473 
f N "rtos_signal" 2 555 ""
v L "sem" 2 555 "int8" `476 
f B "rtos_signal" 2 555 "void(int8 sem)" `475 
f N "rtos_msg_send" 2 556 ""
v L "task" 2 556 "int8" `478 
v L "msg" 2 556 "int8" `479 
f B "rtos_msg_send" 2 556 "void(int8 task,int8 msg)" `477 
f N "rtos_msg_read" 2 557 ""
f B "rtos_msg_read" 2 557 "int8()" `480 
f N "rtos_msg_poll" 2 558 ""
f B "rtos_msg_poll" 2 558 "int8()" `481 
f N "rtos_overrun" 2 559 ""
v L "task" 2 559 "int8" `483 
f B "rtos_overrun" 2 559 "int8(int8 task)" `482 
f N "rtos_stats" 2 560 ""
v L "task" 2 560 "int8" `485 
v L "stat" 2 560 "*int8" `486 
f B "rtos_stats" 2 560 "void(int8 task,*int8 stat)" `484  "#use timer() Prototypes:"
f N "get_ticks" 2 563 ""
f B "get_ticks" 2 563 "int8()" `487 
f N "get_ticks" 2 564 ""
f G "get_ticks" 2 564 "int16(int8 stream)" `488 
f N "get_ticks" 2 565 ""
f G "get_ticks" 2 565 "int32(int8 stream)" `488 
f N "get_ticks" 2 566 ""
v L "stream" 2 566 "int8" `489 
f B "get_ticks" 2 566 "int8(int8 stream)" `488 
f N "get_ticks" 2 567 ""
v L "stream" 2 567 "int8" `491 
f G "get_ticks" 2 567 "int16(int8 stream)" `490 
f N "get_ticks" 2 568 ""
v L "stream" 2 568 "int8" `491 
f G "get_ticks" 2 568 "int32(int8 stream)" `490 
f N "set_ticks" 2 569 ""
v L "value" 2 569 "int8" `491 
f B "set_ticks" 2 569 "void(int8 value)" `490 
f N "set_ticks" 2 570 ""
v L "value" 2 570 "int16" `493 
f B "set_ticks" 2 570 "void(int16 value)" `492 
f N "set_ticks" 2 571 ""
v L "value" 2 571 "int32" `495 
f B "set_ticks" 2 571 "void(int32 value)" `494 
f N "set_ticks" 2 572 ""
v L "stream" 2 572 "int8" `497 
v L "value" 2 572 "int8" `498 
f B "set_ticks" 2 572 "void(int8 stream,int8 value)" `496 
f N "set_ticks" 2 573 ""
v L "stream" 2 573 "int8" `500 
v L "value" 2 573 "int16" `501 
f B "set_ticks" 2 573 "void(int8 stream,int16 value)" `499 
f N "set_ticks" 2 574 ""
v L "stream" 2 574 "int8" `503 
v L "value" 2 574 "int32" `504 
f B "set_ticks" 2 574 "void(int8 stream,int32 value)" `502  "#use pwm() Prototypes:"
f N "pwm_on" 2 577 ""
f B "pwm_on" 2 577 "void()" `505 
f N "pwm_on" 2 578 ""
v L "stream" 2 578 "int8" `507 
f B "pwm_on" 2 578 "void(int8 stream)" `506 
f N "pwm_off" 2 579 ""
f B "pwm_off" 2 579 "void()" `508 
f N "pwm_off" 2 580 ""
v L "stream" 2 580 "int8" `510 
f B "pwm_off" 2 580 "void(int8 stream)" `509 
f N "pwm_set_duty" 2 581 ""
v L "duty" 2 581 "int16" `512 
f B "pwm_set_duty" 2 581 "void(int16 duty)" `511 
f N "pwm_set_duty" 2 582 ""
v L "stream" 2 582 "int8" `514 
v L "duty" 2 582 "int16" `515 
f B "pwm_set_duty" 2 582 "void(int8 stream,int16 duty)" `513 
f N "pwm_set_duty_percent" 2 583 ""
v L "percent" 2 583 "int16" `517 
f B "pwm_set_duty_percent" 2 583 "void(int16 percent)" `516 
f N "pwm_set_duty_percent" 2 584 ""
v L "stream" 2 584 "int8" `519 
v L "percent" 2 584 "int16" `520 
f B "pwm_set_duty_percent" 2 584 "void(int8 stream,int16 percent)" `518 
f N "pwm_set_frequency" 2 585 ""
v L "frequency" 2 585 "int32" `522 
f B "pwm_set_frequency" 2 585 "void(int32 frequency)" `521 
f N "pwm_set_frequency" 2 586 ""
v L "stream" 2 586 "int8" `524 
v L "frequency" 2 586 "int32" `525 
f B "pwm_set_frequency" 2 586 "void(int8 stream,int32 frequency)" `523  "#use capture() Prototypes:"
f N "get_capture_time" 2 589 ""
f B "get_capture_time" 2 589 "int16()" `526 
f N "get_capture_time" 2 590 ""
v L "stream" 2 590 "int8" `528 
f B "get_capture_time" 2 590 "int16(int8 stream)" `527 
f N "get_capture_event" 2 591 ""
f B "get_capture_event" 2 591 "int8()" `529 
f N "get_capture_event" 2 592 ""
v L "stream" 2 592 "int8" `531 
f B "get_capture_event" 2 592 "int8(int8 stream)" `530  "Enviroment Prototypes:"
c L "get_capture_event" 2 5 2 "FUNCTION"
f N "goto_address" 2 605 ""
v L "address" 2 605 "int16" `533 
f B "goto_address" 2 605 "void(int16 address)" `532 
f N "label_address" 2 606 ""
v L "label" 2 606 "int16" `535 
f B "label_address" 2 606 "int16(int16 label)" `534  "Program Memory Prototypes:"
f N "read_program_memory" 2 609 ""
v L "address" 2 609 "int16" `537 
v L "dataptr" 2 609 "*int8" `538 
v L "count" 2 609 "int16" `539 
f B "read_program_memory" 2 609 "void(int16 address,*int8 dataptr,int16 count)" `536 
f N "read_program_eeprom" 2 610 ""
v L "address" 2 610 "int16" `541 
f B "read_program_eeprom" 2 610 "int16(int16 address)" `540 
f N "erase_program_eeprom" 2 611 ""
v L "address" 2 611 "int16" `543 
f B "erase_program_eeprom" 2 611 "void(int16 address)" `542 
f N "write_program_memory" 2 612 ""
v L "address" 2 612 "int16" `545 
v L "dataptr" 2 612 "*int8" `546 
v L "count" 2 612 "int16" `547 
f B "write_program_memory" 2 612 "void(int16 address,*int8 dataptr,int16 count)" `544 
f N "write_program_eeprom" 2 613 ""
v L "address" 2 613 "int16" `549 
v L "data" 2 613 "int16" `550 
f B "write_program_eeprom" 2 613 "void(int16 address,int16 data)" `548  "INT"
c L "write_program_eeprom" 2 5 4 "FUNCTION"
f N "enable_interrupts" 2 620 ""
v L "interrupt" 2 620 "int32" `552 
f B "enable_interrupts" 2 620 "void(int32 interrupt)" `551 
f N "disable_interrupts" 2 621 ""
v L "interrupt" 2 621 "int32" `554 
f B "disable_interrupts" 2 621 "void(int32 interrupt)" `553 
f N "clear_interrupt" 2 622 ""
v L "interrupt" 2 622 "int32" `556 
f B "clear_interrupt" 2 622 "void(int32 interrupt)" `555 
f N "interrupt_active" 2 623 ""
v L "interrupt" 2 623 "int32" `558 
f B "interrupt_active" 2 623 "int8(int32 interrupt)" `557 
f N "ext_int_edge" 2 624 ""
v L "source" 2 624 "int8" `560 
v L "edge" 2 624 "int8" `561 
f B "ext_int_edge" 2 624 "void(int8 source,int8 edge)" `559 
f N "jump_to_irs" 2 625 ""
v L "address" 2 625 "int16" `563 
f B "jump_to_irs" 2 625 "void(int16 address)" `562  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 627 "0x40"
d G "H_TO_L" 2 628 "0"
d G "GLOBAL" 2 630 "0xF2C0"
d G "PERIPH" 2 631 "0xF240"
d G "INT_RTCC" 2 632 "0x00F220"
d G "INT_TIMER0" 2 633 "0x00F220"
d G "INT_TIMER1" 2 634 "0x009D01"
d G "INT_TIMER2" 2 635 "0x009D02"
d G "INT_EXT_L2H" 2 636 "0x5000F210"
d G "INT_EXT_H2L" 2 637 "0x6000F210"
d G "INT_EXT" 2 638 "0x00F210"
d G "INT_EXT1_L2H" 2 639 "0x5001F008"
d G "INT_EXT1_H2L" 2 640 "0x6001F008"
d G "INT_EXT1" 2 641 "0x00F008"
d G "INT_EXT2_L2H" 2 642 "0x5002F010"
d G "INT_EXT2_H2L" 2 643 "0x6002F010"
d G "INT_EXT2" 2 644 "0x00F010"
d G "INT_RB" 2 645 "0x00FFF208"
d G "INT_AD" 2 646 "0x009D40"
d G "INT_RDA" 2 647 "0x009D20"
d G "INT_TBE" 2 648 "0x009D10"
d G "INT_CCP1" 2 649 "0x009D04"
d G "INT_LOWVOLT" 2 650 "0x00A004"
d G "INT_OSCF" 2 651 "0x00A080"
d G "INT_USB" 2 652 "0x00A020"
C L "jump_to_irs" 1 7 6 "FUNCTION"
F N "TIMER2_isr" 0 4 ""
F G "TIMER2_isr" 0 5 "void()" `568 
F N "MAIN" 0 9 ""
F G "MAIN" 0 10 "void()" `569 
C L "MAIN" 0 11 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
